# SPDX-License-Identifier: AGPL-3.0-or-later
# Copyright (C) 2022-2023 Dyne.org foundation <foundation@dyne.org>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

name: 🧪 & 🚀
on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [18]

    name: Test on Node v${{ matrix.node }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Git Sumbodule Update
        run: |
          git submodule update --init
      - name: Set up pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Write local env file
        run: cp .env.example .env.local
      - run: pnpm run build
      - name: Save build folder 🆙
        uses: actions/upload-artifact@v3
        with:
          name: built
          if-no-files-found: error
          path: .next

  e2e:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v3
      - name: Set up pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false
      - name: Download the built folders ⏬
        uses: actions/download-artifact@v3
        with:
          name: built
          path: .next
      - name: Write the cypress.env.json file 📝
        run: |
          echo '${{ secrets.CYPRESS_ENV_CI }}' > cypress.env.json
      - name: Cypress E2E tests 🧪
        uses: cypress-io/github-action@v4
        with:
          start: npm run start
          wait-on: "http://localhost:3000"
          wait-on-timeout: 130
          record: true 
          tag: node-${{ matrix.node }}
          browser: chrome
          config: pageLoadTimeout=60000,baseUrl=http://localhost:3000
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}

  # components:
  #   runs-on: ubuntu-latest
  #   needs: [build, e2e]
  #   steps:
  #     - name: Checkout 🛎️
  #       uses: actions/checkout@v3
  #     - name: Set up pnpm
  #       uses: pnpm/action-setup@v2
  #       with:
  #         version: latest
  #         install: false
  #     - name: Get pnpm store directory
  #       id: pnpm-cache
  #       shell: bash
  #       run: |
  #         echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
  #     - name: Download the built folders ⏬
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: built
  #         path: .next
  #     - name: Write the cypress.env.json file 📝
  #       run: |
  #         echo '${{ secrets.CYPRESS_ENV_CI }}' > cypress.env.json
  #     - name: Cypress Component tests 🧪
  #       uses: cypress-io/github-action@v4
  #       with:
  #         start: npm run start
  #         command: npm run test:component
  #         wait-on: "http://localhost:3000"
  #         wait-on-timeout: 130
  #         record: true
  #         tag: node-${{ matrix.node }}
  #         browser: chrome
  #         config: pageLoadTimeout=60000,baseUrl=http://localhost:3000
  #       env:
  #         CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY_COMPONENTS }}
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         CYPRESS_PROJECT_ID: 7iq8xz

  deploy:
    name: 🚀 Deploy on staging server
    # needs: [e2e, components]
    needs: [e2e]
    if: github.ref == 'refs/heads/main'
    uses: interfacerproject/workflows/.github/workflows/node-staging-deploy.yml@main
    secrets: inherit
    with:
      deploy_url: https://interfacer-gui-staging.dyne.org
